pipeline {
    agent {
        label 'linuxAgent'
    }
    environment {
        EMAIL_TO = 'ngfarimata@ept.sn, dcheikhahmadou@ept.sn'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "44.201.200.73:8081"
        NEXUS_SNAPSHOT_REPOSITORY = "maven-snapshots"
        NEXUS_RELEASE_REPOSITORY = "maven-releases"
        NEXUS_CREDENTIAL_ID = "admin"
    }

    tools {
        maven "maven 3.8.5"
    }

    stages {
        stage('Initialize'){
            steps{
                sh "mvn --version"
            }
        }
       // stage('Clone code from VCS') {
         //   steps {
          //      script {
          //      git branch: 'main',
           //     credentialsId: 'itachi44',
            //    url: 'git@github.com:itachi44/CI-CD-Project.git'

             //   sh "git branch"

             //   }
          //  }
       // }


        stage("Build") {
            steps {
                script {
                    sh "mvn clean package -DskipTests"
                }
            }
        }

        stage("Run tests") {
                    steps {
                        script {
                            sh "mvn test"
                        }
                    }
        }

        stage('Sonarqube') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
                timeout(time: 10, unit: 'MINUTES') {
                   waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deliver for development') {
              when {
                    branch 'main'
                    }
              steps {
                 script {
                     echo 'deploying on nexus maven-snapshots'
                     pom = readMavenPom file: "pom.xml";
                     filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                     echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                     artifactPath = filesByGlob[0].path;
                     artifactExists = fileExists artifactPath;
                     if(artifactExists) {
                         echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                         nexusArtifactUploader(
                             nexusVersion: NEXUS_VERSION,
                             protocol: NEXUS_PROTOCOL,
                             nexusUrl: NEXUS_URL,
                             groupId: pom.groupId,
                             version: pom.version,
                             repository: NEXUS_SNAPSHOT_REPOSITORY,
                             credentialsId: NEXUS_CREDENTIAL_ID,
                             artifacts: [
                                 [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: artifactPath,
                                 type: pom.packaging],
                                 [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: "pom.xml",
                                 type: "pom"]
                             ]
                         );
                     } else {
                         error "*** File: ${artifactPath}, could not be found";
                     }
                 }
            }
         }

        stage('Deploy for production') {
              when {
                   branch 'REC'
              }
              steps {
                 script {
                     echo 'building the project for deployment'
                     sh "mvn install"
                     echo 'deploying on nexus maven-releases'
                     pom = readMavenPom file: "pom.xml";
                     filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                     echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                     artifactPath = filesByGlob[0].path;
                     artifactExists = fileExists artifactPath;
                     if(artifactExists) {
                         echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                         nexusArtifactUploader(
                             nexusVersion: NEXUS_VERSION,
                             protocol: NEXUS_PROTOCOL,
                             nexusUrl: NEXUS_URL,
                             groupId: pom.groupId,
                             version: "0.0.1",
                             repository: NEXUS_RELEASE_REPOSITORY,
                             credentialsId: NEXUS_CREDENTIAL_ID,
                             artifacts: [
                                 [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: artifactPath,
                                 type: pom.packaging],
                                 [artifactId: pom.artifactId,
                                 classifier: '',
                                 file: "pom.xml",
                                 type: "pom"]
                             ]
                         );
                     } else {
                         error "*** File: ${artifactPath}, could not be found";
                     }
                 }
              }
         }



    }
    post {
        always {
            script {
                sh "mvn clean"
            }
            emailext attachLog: true, body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=true}',
            to: "${EMAIL_TO}",
            subject: 'BUILD RESULT IS READY'
        }
        success {
            echo 'You are seeing this because the run is successful'
            emailext attachLog: true, body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=true}',
            to: "${EMAIL_TO}",
            subject: 'SUCCESS'

         }
        failure {
            emailext attachLog: true, body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=true}',
            to: "${EMAIL_TO}",
            subject: '${projectName} build (${sourceBranch}) FAILURE'
            //mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "foo@foomail.com";
         }
        unstable {
            echo 'You are seeing this because the run was marked as unstable'
            emailext attachLog: true, body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=true}',
            to: "${EMAIL_TO}",
            subject: 'UNSTABLE'
         }
        changed {
            echo 'You are seeing this because the Pipeline has changed'
            echo 'The Pipeline was previously failing but is now successful'
            emailext attachLog: true, body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=true}',
            to: "${EMAIL_TO}",
            subject: 'Pipeline has changed'

         }
    }
}
